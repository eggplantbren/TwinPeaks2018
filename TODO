* Implement more examples
* Auto-detect what temperature range is reliable (and even what specific
  temperatures are well-sampled!)
* Verify that the algorithm is theoretically sound

COMPLETED:

* Include tiebreakers
* Remove dnest4 dependency in Python code
* Generalise to more than two scalars
* Parallelise
* Make sense of stdout messages when running in parallel
* Implement thinning
* Plot logZ/H/<f>/<g> maps
* Make a Python package
* Finish canonical.create_canonical() [deprecated]
* Make it work elegantly on one-scalar examples (and possibly 3 or more too)
  [one-scalar is good, 3 or more is hard to plot so I won't do it]
